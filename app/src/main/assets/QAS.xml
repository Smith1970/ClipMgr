<?xml version="1.0" encoding="utf-8" ?>
<QAS>
    <item question="为什么需要前台服务 ?">
        当我们拦截到剪贴板修改时，这个 app 和我们的管理器运行在不同的进程里。
        此时需要查询这个应用的访问规则(允许、拒绝还是询问)，并将这次操作记录保存都我们自己的数据库，
        这就需要进程间通讯——目前的实现方案是使用 ContentProvider 方案。然而在不同的系统上这个行为无法保证，
        某些对后台限制比较严格的 ROM 会禁止这一行为。因此我们不得不开启一个前台服务，以保证链接正常
    </item>

    <item question="为什么提示 '未能获取弹窗服务' ?">
        这个说来话长。如果是老用户应该知道，最开始的几个版本是在本 app 内弹窗的，换句话说就是有 app 修改剪贴板，
        我们将拦截这一行为并转发到我们自己的 app，然后弹窗询问什么的。然而对于某些应用或 ROM 并不合适，
        比如 QQ，MIUI 等，它会自作聪明地弹出一个对话框——"即将打开 放开我的剪贴板，是否允许 ?"，一度让我很无语。
        而且同样存在后台问题，如果弹窗失败(并没有办法得知是否弹窗成功)，用户将丢失所有的剪贴板操作，这是不可接受的。
        在之前两个版本，我将弹窗放到要拦截的宿主进程内。看起来解决了对不对？实际上引入了一个巨大的隐患——兼容性问题。
        不同 app 间的 theme 不同，弹框的样式根本无法做到统一。前几天我尝试硬编码一个 View 代替自带的 dialog 样式，
        您猜怎么着？哈哈，微信还是那个鬼样子，即使 setTextColor(Color.BLACK)，人家仍然是白色的。

        气急败坏，恼羞成怒的我终于决定放弃这些"轻量级"的方案，不如让系统代替我们弹窗。换句话说，我会在 Android
        刚刚启动时注册一个弹窗服务，等需要弹的时候就去请求系统帮我们谈。但如果这一步失败，就会提示 "无法获取弹窗服务"。
        一旦发生，所有的剪贴板操作都会被放行。
    </item>

    <item question="为什么拦截没有生效 ?">
        这个原因有很多，要么 xposed 不正常，要么 app 使用了什么特殊的方式拿到 IClipboard 的 IBinder。
        还有可能是厂商修改了 IClipboard 接口(比如 setPrimaryClip() 的函数签名)，这都会导致拦截失败/不工作。
    </item>

    <item question="已经设置了 '始终允许'，为什么还要弹窗 ?">
        后台死了，参考第一点
    </item>

    <item question="为什么没有找到历史记录 ?">
        后台死了，数据库链接不正常，参考第一点
    </item>

    <item question="为什么会有奇奇怪怪的问题 ?">
        爆裂吧现实，崩坏吧精神，Banishment This WORLD !!!
    </item>
</QAS>