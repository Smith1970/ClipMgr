apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }
    externalNativeBuild {
        ndkBuild {
            path "jni/Android.mk"
        }
    }
}

dependencies {
    compileOnly project(':apicompat')
}

build.doLast {

}


def moduleId = "clipmgr"
def moduleName = "clipmgr"
def moduleAuthor = "nlifew"
def moduleDescription = "hook ClipboardManager.setPrimaryClip()"
def versionName = rootProject.ext.versionName
def versionCode = rootProject.ext.versionCode
def riruApi = 4

def moduleIdMagisk = "riru-$moduleId".replace('_', "-") // use '_' for so file, '-' for Magisk module name
def moduleNameMagisk = "Riru - $moduleName"
def moduleDescriptionMagisk = "$moduleDescription Requires Riru - Core v18 or above installed."
def zipNameMagisk = "magisk-${project.name}-${versionName}.zip"

def isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
def jarPathRelease = "$buildDir/intermediates/packaged-classes/release"
def libPathRelease = "$buildDir/intermediates/library_and_local_jars_jni/release"
def zipPathMagiskRelease = "$buildDir/tmp/magisk"

import org.apache.tools.ant.filters.FixCrLfFilter


task copyRiruPropRelease(type: Copy) {
    from 'template_override/riru_module.prop'
    into "$zipPathMagiskRelease/data/misc/riru/modules/$moduleId"
    filter { line ->
        line.replaceAll('%%%NAME%%%', moduleName)
                .replaceAll('%%%AUTHOR%%%', moduleAuthor)
                .replaceAll('%%%VERSION_NAME%%%', versionName)
                .replaceAll('%%%VERSION_CODE%%%', versionCode.toString())
                .replaceAll('%%%DESCRIPTION%%%', moduleDescription)
                .replaceAll('%%%API%%%', riruApi.toString())
    }
    filter(FixCrLfFilter.class,
            eol: FixCrLfFilter.CrLf.newInstance("lf"))

    doLast {
        file("$zipPathMagiskRelease/riru_module.prop").delete()
        file("$zipPathMagiskRelease/data/misc/riru/modules/$moduleId/riru_module.prop")
                .renameTo("$zipPathMagiskRelease/data/misc/riru/modules/$moduleId/module.prop")
    }
}

task copyMagiskPropRelease(type: Copy) {
    from 'template_override/module.prop'
    into zipPathMagiskRelease
    filter { line ->
        line.replaceAll('%%%ID%%%', moduleIdMagisk)
                .replaceAll('%%%NAME%%%', moduleNameMagisk)
                .replaceAll('%%%VERSION_NAME%%%', versionName)
                .replaceAll('%%%VERSION_CODE%%%', versionCode.toString())
                .replaceAll('%%%AUTHOR%%%', moduleAuthor)
                .replaceAll('%%%DESCRIPTION%%%', moduleDescriptionMagisk)
    }
    filter(FixCrLfFilter.class,
            eol: FixCrLfFilter.CrLf.newInstance("lf"))
}

task copyBuildFilesRelease(type: Exec) {
    if (isWindows)
        commandLine 'dx.bat',
                '--dex',
                "--output=$zipPathMagiskRelease/riru_clipmgr.jar",
                "$jarPathRelease/*.jar"
    else
        commandLine 'dx',
                '--dex',
                "--output=$zipPathMagiskRelease/riru_clipmgr.jar",
                "$jarPathRelease/*.jar"

    doLast {
        file("$zipPathMagiskRelease/system/framework").mkdirs()
        file("$zipPathMagiskRelease/system_x86").mkdirs()
        file("$libPathRelease/arm64-v8a").renameTo("$zipPathMagiskRelease/system/lib64")
        file("$libPathRelease/armeabi-v7a").renameTo("$zipPathMagiskRelease/system/lib")
        file("$libPathRelease/x86_64").renameTo("$zipPathMagiskRelease/system_x86/lib64")
        file("$libPathRelease/x86").renameTo("$zipPathMagiskRelease/system_x86/lib")
        file("$zipPathMagiskRelease/riru_clipmgr.jar").renameTo(
                "$zipPathMagiskRelease/system/framework/riru_clipmgr.jar")
    }
}


task createMagiskTmpDirRelease(type: Copy) {
    from 'template_override'
    into zipPathMagiskRelease
}

task zipMagiskRelease(type: Zip) {
    archiveFileName = zipNameMagisk
    destinationDirectory = file("$projectDir/release")
    from "$zipPathMagiskRelease"
}

task cleanMagiskRelease(type: Delete) {
    delete file(zipPathMagiskRelease)
    delete file("$projectDir/release/$zipNameMagisk")
}

task assembleMagiskRelease(type: GradleBuild) {
    tasks = [
            'cleanMagiskRelease',
            'createMagiskTmpDirRelease',
            'copyBuildFilesRelease',
            'copyMagiskPropRelease',
            'copyRiruPropRelease',
            'zipMagiskRelease'
    ]
}

assembleMagiskRelease.dependsOn(build)